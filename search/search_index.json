{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"picea Lightweight python library for working with trees and sequence collections pip install picea The above figure can be generated with the following code from picea import Tree , treeplot import matplotlib.pyplot as plt newick = '(((a,b),(c,d)),e)' tree = Tree . from_newick ( newick ) fig , ( ax1 , ax2 ) = plt . subplots ( ncols = 2 , figsize = ( 10 , 4 )) #left-to-right layout with direct links treeplot ( tree , style = 'rectangular' , ltr = True , ax = ax1 ) #right-to-left layout with square links treeplot ( tree , style = 'square' , ltr = False , ax = ax2 )","title":"Home"},{"location":"#picea","text":"Lightweight python library for working with trees and sequence collections pip install picea The above figure can be generated with the following code from picea import Tree , treeplot import matplotlib.pyplot as plt newick = '(((a,b),(c,d)),e)' tree = Tree . from_newick ( newick ) fig , ( ax1 , ax2 ) = plt . subplots ( ncols = 2 , figsize = ( 10 , 4 )) #left-to-right layout with direct links treeplot ( tree , style = 'rectangular' , ltr = True , ax = ax1 ) #right-to-left layout with square links treeplot ( tree , style = 'square' , ltr = False , ax = ax2 )","title":"picea"},{"location":"API/sequence/","text":"Sequence containers Alphabet dataclass picea.sequence. Alphabet ( name , members ) Bases set Alphabet of arbitrary biological sequences Attributes members (iterable of str) \u2014 Letters of the alphabet name (str) \u2014 Alphabet name Examples >>> DNA = Alphabet ( 'DNA' , 'ACGT' ) >>> DNA Alphabet ( name = 'DNA' , members = 'ACGT' ) Parameters name (str) \u2014 Alphabet name members (Iterable[str]) \u2014 Letters of the alphabet Methods score ( sequence , match , mismatch , n_chars ) (float) \u2014 Scores how well a sequence matches an alphabet by summing (mis)matches of sequence letters that are not in the alphabet and (mis)matches of alphabet letters that are not in the sequence. validate ( sequence ) (bool) \u2014 Determine whether a sequence strictly fits an alphabet method score ( sequence , match=1.0 , mismatch=-1.0 , n_chars=100 ) Scores how well a sequence matches an alphabet by summing (mis)matches of sequence letters that are not in the alphabet and (mis)matches of alphabet letters that are not in the sequence. Parameters sequence (str) \u2014 Sequence string for which to determine how well it fits the alphabet match (float, optional) \u2014 match score. Defaults to 1.0. mismatch (float, optional) \u2014 mismatch score. Defaults to -1.0. n_chars (int, optional) \u2014 number of sequence characters to use in scoring. Large numbers incur a significant computational cost. Returns (float) Score of how well a sequence matches the alphabet method validate ( sequence ) Determine whether a sequence strictly fits an alphabet Parameters sequence (str) \u2014 Sequence string Returns (bool) true if all characters in sequence are in the alphabet alphabets dataclass picea.sequence. Alphabets ( DNA=<factory> , AminoAcid=<factory> ) Alphabets(DNA: picea.sequence.Alphabet = , AminoAcid: picea.sequence.Alphabet = ) Sequence dataclass picea.sequence. Sequence ( header=None , sequence=None , alphabet=None , annotation=<factory> ) Container for a single biological sequence Examples >>> s1 = Sequence ( 'test_dna' , 'ACGATCGACTAGCA' ) >>> s1 Sequence ( header = 'test_dna' , sequence = 'ACGATCGACTAGCA' , alphabet = Alphabet ( name = 'DNA' , members = '-?ACGNT' )) >>> s2 = Sequence ( 'test_aa' , 'QAPISAIWPOIWQ*' ) >>> s2 Sequence ( header = 'test_aa' , sequence = 'QAPISAIWPOIWQ*' , alphabet = Alphabet ( name = 'AminoAcid' , members = '*-?ACDEFGHIKLMNPQRSTVWXY' )) Returns ([type]) [description] Methods from_fasta ( string ) (Sequence) \u2014 Create a sequence object from a fasta formatted file. single sequence only to_dict ( ) (Dict[str, str]) \u2014 Make dictionary with header and sequence elements to_fasta ( linewidth ) (str) \u2014 Make fasta formatted sequence entry method to_dict ( ) Make dictionary with header and sequence elements Returns (Dict[str, str]) sequence dictionary classmethod from_fasta ( string ) Create a sequence object from a fasta formatted file. single sequence only Examples >>> fasta_string = '>test \\n ACGT' >>> Sequence . from_fasta ( fasta_string ) Sequence ( header = 'test' , sequence = 'ACGT' , alphabet = Alphabet ( name = 'DNA' , members = '-?ACGNT' )) Returns (Sequence) Sequence method to_fasta ( linewidth=80 ) Make fasta formatted sequence entry Returns (str) sequence in fasta format AbstractSequenceCollection abstract class picea.sequence. AbstractSequenceCollection ( sequences=None , sequence_annotation=None ) (Partially) Abstract Base Class for sequence collections. Classes extending from this baseclass should override __setitem__ , __getitem__ , __delitem__ , headers , and n_seqs . If the above methods are implemented, this automatically enables the following methods: from_fasta , to_fasta , from_json , to_json . Parameters sequences (Optional[Iterable[Tuple[str, str]]], optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (Optional[SequenceAnnotation]) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes headers \u2014 List of sequences headers. Overridden in subclasses. iloc \u2014 [summary] n_seqs \u2014 Return the number of sequences in the collection. Overridden in subclasses sequences \u2014 List of sequences without headers Raises NotImplementedError \u2014 Abstract Base Class can not be initialized and serves as a template only Methods batch_rename ( rename_func ) \u2014 [summary] from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] from_sequence_iter ( sequence_iter ) ([type]) \u2014 [summary] pop ( header ) (Sequence) \u2014 [summary] to_fasta ( linewidth ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_sequence_iter ( sequence_iter ) [summary] Raises NotImplementedError \u2014 [description] Returns ([type]) [description] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( linewidth=80 ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] abstract method pop ( header ) [summary] Parameters header (str) \u2014 [description] Returns (Sequence) [description] method batch_rename ( rename_func ) [summary] Parameters rename_func (Callable) \u2014 [description] SequenceCollection class picea.sequence. SequenceCollection ( sequences=None , sequence_annotation=None ) Bases picea.sequence.AbstractSequenceCollection A container for multiple (unaligned) DNA or amino acid sequences Parameters sequences (iterable of (str, str), optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (SequenceAnnotation, optional) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes iloc \u2014 [summary] sequences \u2014 List of sequences without headers Methods align ( method , method_kwargs ) ([type]) \u2014 [summary] batch_rename ( rename_func ) \u2014 [summary] from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] from_sequence_iter ( sequence_iter ) ([type]) \u2014 [summary] pop ( header ) (Sequence) \u2014 [summary] to_fasta ( linewidth ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_sequence_iter ( sequence_iter ) [summary] Raises NotImplementedError \u2014 [description] Returns ([type]) [description] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( linewidth=80 ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] method batch_rename ( rename_func ) [summary] Parameters rename_func (Callable) \u2014 [description] method align ( method='mafft' , method_kwargs={} ) [summary] Parameters method (str, optional) \u2014 [description]. Defaults to 'mafft'. method_kwargs (Dict[str, str], optional) \u2014 [description]. Defaults to dict(). Returns ([type]) [description] method pop ( header ) [summary] Parameters header (str) \u2014 [description] Returns (Sequence) [description] MultipleSequenceAlignment class picea.sequence. MultipleSequenceAlignment ( sequences=None , sequence_annotation=None ) Bases picea.sequence.SequenceCollection picea.sequence.AbstractSequenceCollection A container for multiple (unaligned) DNA or amino acid sequences Parameters sequences (iterable of Sequence, optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (SequenceAnnotation, optional) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes iloc \u2014 [summary] sequences \u2014 List of sequences without headers Methods __delitem__ ( header ) \u2014 WIP! align ( method , method_kwargs ) ([type]) \u2014 [summary] batch_rename ( rename_func ) \u2014 [summary] from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] from_sequence_iter ( sequence_iter ) ([type]) \u2014 [summary] pop ( header ) (Sequence) \u2014 [summary] to_fasta ( linewidth ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_sequence_iter ( sequence_iter ) [summary] Raises NotImplementedError \u2014 [description] Returns ([type]) [description] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( linewidth=80 ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] method batch_rename ( rename_func ) [summary] Parameters rename_func (Callable) \u2014 [description] method align ( method='mafft' , method_kwargs={} ) [summary] Parameters method (str, optional) \u2014 [description]. Defaults to 'mafft'. method_kwargs (Dict[str, str], optional) \u2014 [description]. Defaults to dict(). Returns ([type]) [description] method __delitem__ ( header ) WIP! Parameters header (str) \u2014 [description] method pop ( header ) [summary] Parameters header (str) \u2014 [description] Returns (Sequence) [description] SequenceAnnotation class picea.sequence. SequenceAnnotation ( sequence=None ) [summary] Parameters sequence (Optional[Sequence], optional) \u2014 [description]. Defaults to None. Methods from_gff ( filename , string , sequence ) ([type]) \u2014 [summary] from_gtf ( filename , string , sequence ) ([type]) \u2014 [summary] from_json ( filename , string , sequence ) (SequenceAnnotation) \u2014 [summary] to_gff ( ) (str) \u2014 [summary] to_json ( indent ) (str) \u2014 [summary] classmethod from_gtf ( filename=None , string=None , sequence=None ) [summary] Raises IndexError \u2014 [description] IndexError \u2014 [description] Returns ([type]) [description] classmethod from_gff ( filename=None , string=None , sequence=None ) [summary] Parameters filename ([type], optional) \u2014 [description]. Defaults to None. string ([type], optional) \u2014 [description]. Defaults to None. sequence ([type], optional) \u2014 [description]. Defaults to None. Returns ([type]) [description] method to_gff ( ) [summary] Returns (str) [description] classmethod from_json ( filename=None , string=None , sequence=None ) \u2192 SequenceAnnotation [summary] method to_json ( indent=None ) [summary] Returns (str) [description]","title":"Sequence containers"},{"location":"API/sequence/#sequence-containers","text":"","title":"Sequence containers"},{"location":"API/sequence/#alphabet","text":"dataclass picea.sequence. Alphabet ( name , members ) Bases set Alphabet of arbitrary biological sequences Attributes members (iterable of str) \u2014 Letters of the alphabet name (str) \u2014 Alphabet name Examples >>> DNA = Alphabet ( 'DNA' , 'ACGT' ) >>> DNA Alphabet ( name = 'DNA' , members = 'ACGT' ) Parameters name (str) \u2014 Alphabet name members (Iterable[str]) \u2014 Letters of the alphabet Methods score ( sequence , match , mismatch , n_chars ) (float) \u2014 Scores how well a sequence matches an alphabet by summing (mis)matches of sequence letters that are not in the alphabet and (mis)matches of alphabet letters that are not in the sequence. validate ( sequence ) (bool) \u2014 Determine whether a sequence strictly fits an alphabet method score ( sequence , match=1.0 , mismatch=-1.0 , n_chars=100 ) Scores how well a sequence matches an alphabet by summing (mis)matches of sequence letters that are not in the alphabet and (mis)matches of alphabet letters that are not in the sequence. Parameters sequence (str) \u2014 Sequence string for which to determine how well it fits the alphabet match (float, optional) \u2014 match score. Defaults to 1.0. mismatch (float, optional) \u2014 mismatch score. Defaults to -1.0. n_chars (int, optional) \u2014 number of sequence characters to use in scoring. Large numbers incur a significant computational cost. Returns (float) Score of how well a sequence matches the alphabet method validate ( sequence ) Determine whether a sequence strictly fits an alphabet Parameters sequence (str) \u2014 Sequence string Returns (bool) true if all characters in sequence are in the alphabet","title":"Alphabet"},{"location":"API/sequence/#alphabets","text":"dataclass picea.sequence. Alphabets ( DNA=<factory> , AminoAcid=<factory> ) Alphabets(DNA: picea.sequence.Alphabet = , AminoAcid: picea.sequence.Alphabet = )","title":"alphabets"},{"location":"API/sequence/#sequence","text":"dataclass picea.sequence. Sequence ( header=None , sequence=None , alphabet=None , annotation=<factory> ) Container for a single biological sequence Examples >>> s1 = Sequence ( 'test_dna' , 'ACGATCGACTAGCA' ) >>> s1 Sequence ( header = 'test_dna' , sequence = 'ACGATCGACTAGCA' , alphabet = Alphabet ( name = 'DNA' , members = '-?ACGNT' )) >>> s2 = Sequence ( 'test_aa' , 'QAPISAIWPOIWQ*' ) >>> s2 Sequence ( header = 'test_aa' , sequence = 'QAPISAIWPOIWQ*' , alphabet = Alphabet ( name = 'AminoAcid' , members = '*-?ACDEFGHIKLMNPQRSTVWXY' )) Returns ([type]) [description] Methods from_fasta ( string ) (Sequence) \u2014 Create a sequence object from a fasta formatted file. single sequence only to_dict ( ) (Dict[str, str]) \u2014 Make dictionary with header and sequence elements to_fasta ( linewidth ) (str) \u2014 Make fasta formatted sequence entry method to_dict ( ) Make dictionary with header and sequence elements Returns (Dict[str, str]) sequence dictionary classmethod from_fasta ( string ) Create a sequence object from a fasta formatted file. single sequence only Examples >>> fasta_string = '>test \\n ACGT' >>> Sequence . from_fasta ( fasta_string ) Sequence ( header = 'test' , sequence = 'ACGT' , alphabet = Alphabet ( name = 'DNA' , members = '-?ACGNT' )) Returns (Sequence) Sequence method to_fasta ( linewidth=80 ) Make fasta formatted sequence entry Returns (str) sequence in fasta format","title":"Sequence"},{"location":"API/sequence/#abstractsequencecollection","text":"abstract class picea.sequence. AbstractSequenceCollection ( sequences=None , sequence_annotation=None ) (Partially) Abstract Base Class for sequence collections. Classes extending from this baseclass should override __setitem__ , __getitem__ , __delitem__ , headers , and n_seqs . If the above methods are implemented, this automatically enables the following methods: from_fasta , to_fasta , from_json , to_json . Parameters sequences (Optional[Iterable[Tuple[str, str]]], optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (Optional[SequenceAnnotation]) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes headers \u2014 List of sequences headers. Overridden in subclasses. iloc \u2014 [summary] n_seqs \u2014 Return the number of sequences in the collection. Overridden in subclasses sequences \u2014 List of sequences without headers Raises NotImplementedError \u2014 Abstract Base Class can not be initialized and serves as a template only Methods batch_rename ( rename_func ) \u2014 [summary] from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] from_sequence_iter ( sequence_iter ) ([type]) \u2014 [summary] pop ( header ) (Sequence) \u2014 [summary] to_fasta ( linewidth ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_sequence_iter ( sequence_iter ) [summary] Raises NotImplementedError \u2014 [description] Returns ([type]) [description] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( linewidth=80 ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] abstract method pop ( header ) [summary] Parameters header (str) \u2014 [description] Returns (Sequence) [description] method batch_rename ( rename_func ) [summary] Parameters rename_func (Callable) \u2014 [description]","title":"AbstractSequenceCollection"},{"location":"API/sequence/#sequencecollection","text":"class picea.sequence. SequenceCollection ( sequences=None , sequence_annotation=None ) Bases picea.sequence.AbstractSequenceCollection A container for multiple (unaligned) DNA or amino acid sequences Parameters sequences (iterable of (str, str), optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (SequenceAnnotation, optional) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes iloc \u2014 [summary] sequences \u2014 List of sequences without headers Methods align ( method , method_kwargs ) ([type]) \u2014 [summary] batch_rename ( rename_func ) \u2014 [summary] from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] from_sequence_iter ( sequence_iter ) ([type]) \u2014 [summary] pop ( header ) (Sequence) \u2014 [summary] to_fasta ( linewidth ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_sequence_iter ( sequence_iter ) [summary] Raises NotImplementedError \u2014 [description] Returns ([type]) [description] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( linewidth=80 ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] method batch_rename ( rename_func ) [summary] Parameters rename_func (Callable) \u2014 [description] method align ( method='mafft' , method_kwargs={} ) [summary] Parameters method (str, optional) \u2014 [description]. Defaults to 'mafft'. method_kwargs (Dict[str, str], optional) \u2014 [description]. Defaults to dict(). Returns ([type]) [description] method pop ( header ) [summary] Parameters header (str) \u2014 [description] Returns (Sequence) [description]","title":"SequenceCollection"},{"location":"API/sequence/#multiplesequencealignment","text":"class picea.sequence. MultipleSequenceAlignment ( sequences=None , sequence_annotation=None ) Bases picea.sequence.SequenceCollection picea.sequence.AbstractSequenceCollection A container for multiple (unaligned) DNA or amino acid sequences Parameters sequences (iterable of Sequence, optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (SequenceAnnotation, optional) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes iloc \u2014 [summary] sequences \u2014 List of sequences without headers Methods __delitem__ ( header ) \u2014 WIP! align ( method , method_kwargs ) ([type]) \u2014 [summary] batch_rename ( rename_func ) \u2014 [summary] from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] from_sequence_iter ( sequence_iter ) ([type]) \u2014 [summary] pop ( header ) (Sequence) \u2014 [summary] to_fasta ( linewidth ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_sequence_iter ( sequence_iter ) [summary] Raises NotImplementedError \u2014 [description] Returns ([type]) [description] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( linewidth=80 ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] method batch_rename ( rename_func ) [summary] Parameters rename_func (Callable) \u2014 [description] method align ( method='mafft' , method_kwargs={} ) [summary] Parameters method (str, optional) \u2014 [description]. Defaults to 'mafft'. method_kwargs (Dict[str, str], optional) \u2014 [description]. Defaults to dict(). Returns ([type]) [description] method __delitem__ ( header ) WIP! Parameters header (str) \u2014 [description] method pop ( header ) [summary] Parameters header (str) \u2014 [description] Returns (Sequence) [description]","title":"MultipleSequenceAlignment"},{"location":"API/sequence/#sequenceannotation","text":"class picea.sequence. SequenceAnnotation ( sequence=None ) [summary] Parameters sequence (Optional[Sequence], optional) \u2014 [description]. Defaults to None. Methods from_gff ( filename , string , sequence ) ([type]) \u2014 [summary] from_gtf ( filename , string , sequence ) ([type]) \u2014 [summary] from_json ( filename , string , sequence ) (SequenceAnnotation) \u2014 [summary] to_gff ( ) (str) \u2014 [summary] to_json ( indent ) (str) \u2014 [summary] classmethod from_gtf ( filename=None , string=None , sequence=None ) [summary] Raises IndexError \u2014 [description] IndexError \u2014 [description] Returns ([type]) [description] classmethod from_gff ( filename=None , string=None , sequence=None ) [summary] Parameters filename ([type], optional) \u2014 [description]. Defaults to None. string ([type], optional) \u2014 [description]. Defaults to None. sequence ([type], optional) \u2014 [description]. Defaults to None. Returns ([type]) [description] method to_gff ( ) [summary] Returns (str) [description] classmethod from_json ( filename=None , string=None , sequence=None ) \u2192 SequenceAnnotation [summary] method to_json ( indent=None ) [summary] Returns (str) [description]","title":"SequenceAnnotation"},{"location":"API/tree/","text":"Tree containers dataclass picea.tree. Tree ( name=None , length=0.0 , children=<factory> , ID=None , depth=None , parent=None , cumulative_length=0.0 ) [summary] Attributes iloc \u2014 Index based index leaves \u2014 A list of leaf nodes only links \u2014 A list of all (parent, child) combinations loc \u2014 Name based index nodes \u2014 A list of all tree nodes in breadth-first order root \u2014 Root node of the (sub)tree Returns ([type]) [description] Methods __post_init__ ( ID , *args , **kwargs ) \u2014 [summary] breadth_first ( ) (generator(Tree)) \u2014 Generator implementing breadth first search starting at root node depth_first ( post_order ) (generator(Tree)) \u2014 Generator implementing depth first search in either post- or pre-order traversel from_newick ( string , filename ) (Tree) \u2014 Parse a newick formatted string into a Tree object from_sklearn ( clustering ) (Tree) \u2014 Read a tree from sklearn agglomerative clustering to_dict ( ) (TreeDict) \u2014 [summary] to_newick ( branch_lengths ) (String) \u2014 Make a Newick formatted string method __post_init__ ( ID , *args , **kwargs ) [summary] Parameters ID ([type]) \u2014 [description] classmethod from_newick ( string=None , filename=None ) Parse a newick formatted string into a Tree object Parameters newick_string (string) \u2014 Newick formatted tree string Returns (Tree) Tree object method to_newick ( branch_lengths=True ) Make a Newick formatted string Parameters branch_lengths (bool, optional) \u2014 Whether to include branch lengths in the Newick string. Defaults to True. Returns (String) Newick formatted tree string classmethod from_sklearn ( clustering ) Read a tree from sklearn agglomerative clustering Parameters clustering (sklearn object) \u2014 sklearn agglomerative clustering object. Returns (Tree) Tree object method to_dict ( ) [summary] Returns (TreeDict) [description] generator breadth_first ( ) \u2192 generator(Tree) Generator implementing breadth first search starting at root node generator depth_first ( post_order=True ) \u2192 generator(Tree) Generator implementing depth first search in either post- or pre-order traversel Keyword Arguments: post_order (bool, optional): Depth first search in post-order traversal or not. Defaults to True","title":"Tree containers"},{"location":"API/tree/#tree-containers","text":"dataclass picea.tree. Tree ( name=None , length=0.0 , children=<factory> , ID=None , depth=None , parent=None , cumulative_length=0.0 ) [summary] Attributes iloc \u2014 Index based index leaves \u2014 A list of leaf nodes only links \u2014 A list of all (parent, child) combinations loc \u2014 Name based index nodes \u2014 A list of all tree nodes in breadth-first order root \u2014 Root node of the (sub)tree Returns ([type]) [description] Methods __post_init__ ( ID , *args , **kwargs ) \u2014 [summary] breadth_first ( ) (generator(Tree)) \u2014 Generator implementing breadth first search starting at root node depth_first ( post_order ) (generator(Tree)) \u2014 Generator implementing depth first search in either post- or pre-order traversel from_newick ( string , filename ) (Tree) \u2014 Parse a newick formatted string into a Tree object from_sklearn ( clustering ) (Tree) \u2014 Read a tree from sklearn agglomerative clustering to_dict ( ) (TreeDict) \u2014 [summary] to_newick ( branch_lengths ) (String) \u2014 Make a Newick formatted string method __post_init__ ( ID , *args , **kwargs ) [summary] Parameters ID ([type]) \u2014 [description] classmethod from_newick ( string=None , filename=None ) Parse a newick formatted string into a Tree object Parameters newick_string (string) \u2014 Newick formatted tree string Returns (Tree) Tree object method to_newick ( branch_lengths=True ) Make a Newick formatted string Parameters branch_lengths (bool, optional) \u2014 Whether to include branch lengths in the Newick string. Defaults to True. Returns (String) Newick formatted tree string classmethod from_sklearn ( clustering ) Read a tree from sklearn agglomerative clustering Parameters clustering (sklearn object) \u2014 sklearn agglomerative clustering object. Returns (Tree) Tree object method to_dict ( ) [summary] Returns (TreeDict) [description] generator breadth_first ( ) \u2192 generator(Tree) Generator implementing breadth first search starting at root node generator depth_first ( post_order=True ) \u2192 generator(Tree) Generator implementing depth first search in either post- or pre-order traversel Keyword Arguments: post_order (bool, optional): Depth first search in post-order traversal or not. Defaults to True","title":"Tree containers"}]}